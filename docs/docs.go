// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/access/{guid}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Получить пару access, refresh токенов",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Идентификатор пользователя",
                        "name": "guid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerAccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка создания токена",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerNewError"
                        }
                    },
                    "500": {
                        "description": "Ошибка парсинга UserAgent",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerNewError"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Осуществить logout по access токену",
                "responses": {
                    "204": {
                        "description": "Успешно"
                    },
                    "400": {
                        "description": "Ошибка выхода",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerNewError"
                        }
                    },
                    "401": {
                        "description": "Валидный токен не найден",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerNewError"
                        }
                    },
                    "500": {
                        "description": "Ошибка парсинга UserAgent",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerNewError"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Получение guid текущего пользователя",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerMeResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный токен",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerNewError"
                        }
                    },
                    "401": {
                        "description": "Валидный токен не найден",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerNewError"
                        }
                    },
                    "500": {
                        "description": "Ошибка парсинга UserAgent",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerNewError"
                        }
                    }
                }
            }
        },
        "/refresh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Получить новый access токен",
                "parameters": [
                    {
                        "description": "Refresh токен",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerRefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerAccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка обновления токена",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerNewError"
                        }
                    },
                    "401": {
                        "description": "Валидный токен не найден",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerNewError"
                        }
                    },
                    "500": {
                        "description": "Ошибка парсинга UserAgent",
                        "schema": {
                            "$ref": "#/definitions/swagger.SwaggerNewError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "swagger.SwaggerAccessResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "swagger.SwaggerMeResponse": {
            "type": "object",
            "properties": {
                "guid": {
                    "type": "integer"
                }
            }
        },
        "swagger.SwaggerNewError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "swagger.SwaggerRefreshRequest": {
            "type": "object",
            "required": [
                "refresh"
            ],
            "properties": {
                "refresh": {
                    "type": "string"
                }
            }
        },
        "swagger.SwaggerValidateData": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
